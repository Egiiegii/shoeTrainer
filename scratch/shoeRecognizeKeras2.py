'''

'''
from __future__ import print_function
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense, BatchNormalization
from keras.optimizers import SGD
from keras.callbacks import ModelCheckpoint
from keras import backend as K
import os.path
import numpy
import matplotlib.pyplot as plt
from input_data import *

# dimensions of our images.
img_width, img_height = 56, 56
data_directory = 'data'
# train_data_dir = 'data/train'
# validation_data_dir = 'data/validation'
num_classes = 2

#model, weight saving location
f_model = './model'
model_filename = 'cnn_model.json'
weights_filename = 'cnn_model_weights.hdf5'
data_augmentation = False
# train_sample_number = 120
# test_sample_number = 34

# nb_train_samples = 86*40
# nb_validation_samples = test_sample_number*20
# train_batch = train_sample_number
# test_batch = test_sample_number
# nb_epoch = 100
batch_size = 30
epochs = 50

# (x_train, y_train), (x_test, y_test) = egii_data_generate(data_directory)
(x_train, y_train), (x_test, y_test) = cifar10.load_data()


#training model
model = Sequential()

model.add(Conv2D(32,kernel_size=(3, 3),padding='valid', input_shape=x_train.shape[1:]))
# model.add(Conv2D(32,kernel_size=(3, 3),padding='valid', input_shape=(img_width, img_height, 3)))
# model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))

model.add(Conv2D(64, (3, 3)))
# model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))

model.add(Conv2D(128, (3, 3)))
# model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))

model.add(Flatten())
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

# initiate RMSprop optimizer
# opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
# model.compile(loss='categorical_crossentropy',
# model.compile(loss='binary_crossentropy',
#               optimizer='adam',
#               metrics=['accuracy'])

# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# x_train = x_train.astype('float32')
# x_test = x_test.astype('float32')
# x_train /= 255
# x_test /= 255

if not data_augmentation:
    print('Not using data augmentation.')
    history = model.fit(x_train, y_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(x_test, y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=20,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    history = model.fit_generator(datagen.flow(x_train, y_train,
                                     batch_size=batch_size),
                        # steps_per_epoch=x_train.shape[0] // batch_size,
                        steps_per_epoch=x_train.shape[0] * 20,
                        epochs=epochs,
                        validation_data=(x_test, y_test))




# # ---------------------------------------
# # this is the augmentation configuration we will use for training
# train_datagen = ImageDataGenerator(
#     featurewise_center=False,
#     samplewise_center=False,
#     zca_whitening=False,
#     zoom_range=0.2,
#     rotation_range=20, 
#     width_shift_range=0.3,
# 	height_shift_range=0.3,
# 	fill_mode='nearest',
# 	vertical_flip=False,
#     horizontal_flip=True
# )

# # this is the augmentation configuration we will use for testing:
# # only rescaling
# test_datagen = ImageDataGenerator(

#     zoom_range=0.2,
#     rotation_range=20, 
#     vertical_flip=False,
#     horizontal_flip=True
#     )

# train_generator = train_datagen.flow_from_directory(
#         train_data_dir,
#         target_size=(img_width, img_height),
#         batch_size=train_batch,

# 	# save_to_dir="saved",   
#         class_mode='binary')

# validation_generator = test_datagen.flow_from_directory(
#         validation_data_dir,
#         target_size=(img_width, img_height),
#         batch_size=test_batch,
#         class_mode='binary')

# checkpointer = ModelCheckpoint(filepath="./saved/weights.hdf5", verbose=1, save_best_only=True)

# # history = model.fit_generator(
# #         train_generator,
# #         samples_per_epoch=nb_train_samples,
# #         nb_epoch=nb_epoch,
# #         validation_data=validation_generator,
# #         nb_val_samples=nb_validation_samples,
# #         callbacks=[checkpointer])


# # history = model.fit_generator(train_generator, nb_train_samples, epochs=nb_epoch, verbose=1, callbacks=[checkpointer], 
# #     validation_data=validation_generator, validation_steps=nb_validation_samples, 
# #     class_weight=None, max_q_size=10, workers=1, pickle_safe=False, initial_epoch=0)

# model.fit_generator(
#         train_generator,
#         steps_per_epoch=1000,
#         epochs=50,
#         validation_data=validation_generator,
#         validation_steps=400)

# # --------------------------------------------
print('save the architecture of a model')
json_string = model.to_json()
open(os.path.join(f_model, model_filename), 'w').write(json_string)
print('save weights')
model.save_weights(os.path.join(f_model, weights_filename))

print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
